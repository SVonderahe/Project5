import java.text.NumberFormat;
import java.util.ArrayList;


/**
 * <h1>CargoPlane</h1> Represents a Cargo Plane
 */
public class CargoPlane extends Vehicle {
    final double GAS_RATE = 2.33;

    /**
     * Default Constructor
     */
    //============================================================================
    public CargoPlane() {
        super();
    }

    //============================================================================

    /**
     * Constructor
     *
     * @param licensePlate license plate of vehicle
     * @param maxWeight    maximum weight that the vehicle can hold
     */
    //============================================================================
    public CargoPlane(String licensePlate, double maxWeight) {
        super(licensePlate, maxWeight);
    }

    //============================================================================

    /**
     * Overides its superclass method. Instead, after each iteration, the range will
     * increase by 10.
     *
     * @param warehousePackages List of packages to add from
     */
    @Override

    public void fill(ArrayList<Package> warehousePackages) {
        int increment = 10;
        int range = 0;
        int maxRange = 0;

        for (Package p : warehousePackages) {
            if (getRange(p) > maxRange) {
                maxRange = getRange(p);
            }
        }

        while(true) {
            for (int i = 0; i < warehousePackages.size(); i++) {
                if (getRange(warehousePackages.get(i)) <= range) { // changed from <=
                    if (addPackage(warehousePackages.get(i))) {
                        warehousePackages.remove(i);
                        i--;
                    }
                }

                if (range >= maxRange && (warehousePackages.size() == 0 || i == warehousePackages.size() - 1)) {
                    return;
                }
            }
            range += increment;
        }
    }

    /*public void fill(ArrayList<Package> warehousePackages) {
        int increment = 10;
        int range = 0;
        int maxRange = 0;

        for (Package p : warehousePackages) {
            if (getRange(p) > maxRange) {
                maxRange = getRange(p);
            }
        }

        while(true) {
            for (int i = 0; i < warehousePackages.size(); i++) {
                if (getRange(warehousePackages.get(i)) <= range) {
                    if (!getPackages().contains(warehousePackages.get(i))) {
                        addPackage(warehousePackages.get(i));
                        warehousePackages.remove(i);
                    }
                }

                if (range >= maxRange && i == warehousePackages.size() - 1) {
                    return;
                }
            }
            range += increment;
        }
    }*/

    /*public void fill(ArrayList<Package> warehousePackages) {
        int increment = 10;
        int range = 0;

        // TODO Personal check on labeled loops

        outer:
        while(true) {
            for (Package p : warehousePackages) {
                if (getRange(p) <= range) {
                    if (!addPackage(p)) {
                        break outer;
                    }
                }
            }
            range += increment;
        }
    }*/



    /*
     * =============================================================================
     * | Methods from Profitable Interface
     * =============================================================================
     */

    /**
     * Returns the profits generated by the packages currently in the Cargo Plane.
     * <p>
     * &sum;p<sub>price</sub> - (range<sub>max</sub> &times; 2.33)
     * </p>
     */
    @Override
    public double getProfit() {
        int maxRange = getRange(getPackages().get(0));
        double priceSum = 0;

        for (Package p : getPackages()) {
            priceSum += p.getPrice();

            if (maxRange < getRange(p)) {
                maxRange = getRange(p);
            }
        }

        double totalGasCost = GAS_RATE * (double) maxRange;
        return priceSum - totalGasCost;
    }

    /**
     * Generates a String of the Cargo Plane report. Cargo plane report includes:
     * <ul>
     * <li>License Plate No.</li>
     * <li>Destination</li>
     * <li>Current Weight/Maximum Weight</li>
     * <li>Net Profit</li>
     * <li>Shipping labels of all packages in cargo plane</li>
     * </ul>
     *
     * @return Cargo Plane Report
     */
    @Override
    public String report() {
        NumberFormat nf = NumberFormat.getCurrencyInstance();
        NumberFormat numfor = NumberFormat.getNumberInstance();
        numfor.setMinimumFractionDigits(2);
        String report = "";
        report +=
                "==========Cargo Plane Report==========\n" +
                        "License Plate No.: " + getLicensePlate() + "\n" +
                        "Destination: " + getZipDest() + "\n" +
                        "Weight Load: " + numfor.format(getCurrentWeight()) + "/" + numfor.format(getMaxWeight()) + "\n" +
                        "Net Profit: " + nf.format(getProfit()) + "\n" +
                        "=====Shipping Labels=====\n";

        for (Package p : getPackages()) {
            report += p.shippingLabel() + "\n";
        }

        report += "==============================";
        return report;
    }
}